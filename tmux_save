#!/bin/sh
# TMUX SAVE - Save running tmux sessions; https://github.com/c0rner/scripts
#
# Saves all running sessions into a shell script that later can be executed
# to restore lost sessions (like from a reboot).
# Supported on tmux v1.6 and above.
#
# Requirements:
#     * TMUX v1.6+
#     * base64
#     * bzip2
#
# Example usage could be to have .bash_logout save all sessions each time
# a shell window is closed or you sign out after detatch.
#     # ~/.bash_logout
#     tmux has-session && ~/bin/tmux_save > ~/.tmux.save
#
# Restore lost sessions by running the script produced by tmux_save:
#     sh ~/.tmux.save

getVersion() {
   local ver=$(tmux -V | awk '{sub(/\./, " "); print $2,$3}')

   IFS=" "; set ${ver}; IFS=${Newifs}
   TmuxMajor=$1
   TmuxMinor=$2
}

getOptions() {
   tmux show-options -g -t $1
}

getWindowOptions() {
   tmux show-window-options -g -t $1
}

getPanes() {
   local target=$1
   [ -z ${target} ] && return

   local format
   if [ ${TmuxMajor} -eq 1 -a ${TmuxMinor} -lt 8 ]; then
      format="#{pane_index}${FS}#{window_name}${FS}#{pane_pid}${FS}#{pane_start_command}"
   else
      format="#{pane_index}${FS}#{window_name}${FS}#{pane_pid}${FS}#{pane_start_command}${FS}#{pane_current_path}${FS}#{pane_current_command}"
   fi
   tmux list-panes -t "${target}" -F "${format}"
}

getWindows() {
   local target=$1
   [ -z ${target} ] && return

   local format="#{window_index}${FS}#{window_flags}${FS}#{window_layout}"
   tmux list-windows -t "${target}" -F "${format}"
}

getSessions() {
   tmux list-sessions -F "#{session_name}"
}

savePaneHistory() {
   local pane=$1
   [ -z ${pane} ] && return

   # Save the last $HistoryLines lines from pane history
   # TODO: Fix unsecure temporary file usage
   # TODO: Explore new functionality in 1.8
   # - Skip temporary file usage with capture-pane -p & copy-pipe)
   # - Check alternate_on and grab alternate screen when set
   if [ ${TmuxMajor} -eq 1 -a ${TmuxMinor} -lt 8 ]; then
      tmux capture-pane -S -${HistoryLines} -t "${pane}"
   else
      # TMUX 1.8 introduced '-e' flag to capture escape codes
      tmux capture-pane -e -S -${HistoryLines} -t "${pane}"
   fi
   tmux save-buffer "${TmuxTemp}"
   tmux delete-buffer
   echo "# Restore pane history (last ${HistoryLines} lines)"
   echo "tmux send-keys -t \"${pane}\" \"cat ${TmuxFifo}\" C-m"
   echo "base64 -d << EOB | bunzip2 -cd > \"${TmuxFifo}\""
   # Strip excessive trailing new lines of history before saving
   awk '{ if ($0 == "") {nl+=1} else {if (nl) {for (i=0; i<nl; i++) print "\n"} print $0; nl=0} }' "${TmuxTemp}" | bzip2 -c | base64
   rm -f "${TmuxTemp}"
   echo "EOB"
}

savePane() {
   local target=$1
   local -i window=$2
   local -i baseid=$3
   local pane="${target}:${window}.$(( PaneIndex + ${baseid} ))"

   IFS=${FS}; set $4; IFS=${Newifs}
   local command="$4"
   local cwd="~"

   # TODO: Explore new functionality in 1.8 (pane_in_mode)
   # Capture panes that for example are in clock-mode

   # Save current working directory for this pane
   if [ ${TmuxMajor} -eq 1 -a ${TmuxMinor} -lt 8 ]; then
      if [ -d "/proc" ]; then
         cwd=$(readlink "/proc/$3/cwd")
      fi
   else
      # TMUX 1.8 introduced #{pane_current_path}
      cwd="$5"
   fi

   if [ -n "${cwd}" -a "${CurrentPath}" != "${cwd}" ]; then
      CurrentPath="$cwd"
      echo "# New working directory (read from /proc/$3/cwd)"
      echo "cd \"${CurrentPath}\""
   fi

   if [ ${WindowIndex} -eq 0 -a ${PaneIndex} -eq 0 ]; then
      local -i winbase=$(getOptions "${target}" | awk '/base-index/{print $2}')
      echo "# [${pane}] - New session"
      echo "tmux new-session -d -s \"${target}\" -n \"$2\""
      [ ${window} -ne ${winbase} ] && echo "tmux move-window -d -s \"${target}:${winbase}\" -t \"${target}:${window}\""
   elif [ ${PaneIndex} -eq 0 ]; then
      echo "# [${pane}] - New window"
      echo "tmux new-window -d -t \"${target}:${window}\" -n \"$2\""
   else
      echo "# [${pane}] - New pane"
      echo "tmux split-window -t \"${target}:${window}.$(( PaneIndex + baseid - 1 ))\""
   fi

   savePaneHistory "${pane}"

   # Prepare command string
   if [ -z "${command}" ]; then
      if [ ! -d "/proc" ]; then
         if [ ${TmuxMajor} -eq 1 -a ${TmuxMinor} -lt 8 ]; then
            echo "# Unable to get current command"
         else
            echo "# Command (from pane_current_command, not perfect since we lose args)"
            command="$6"
         fi
      else
         # FIXME: This will only get first pid from the list
         local -i pid=$(ps ao "ppid,pid" | awk "/^ ?$3/{ print \$2; exit }")
         if [ "${pid}" -gt 1 ]; then
            echo "# Command (read from /proc/${pid}/cmdline)"
            command=$(cat /proc/${pid}/cmdline | awk '{gsub(/\0/, " "); print}')
         fi
      fi
   fi

   # Inject command if we discovered something running
   if [ -n "${command}" ]; then
      echo "# CAUTION! '${command}' will be executed in '${CurrentPath}'"
      echo "tmux send-keys -t \"${pane}\" \"${command}\" C-m"
   fi
}

saveWindow() {
   local target=$1
   local -i panebase=$(getWindowOptions "${target}" | awk '/pane-base-index/{print $2}')
   local pane
   IFS=${FS}; set $2; IFS=${Newifs}

   PaneIndex=0
   for pane in $(getPanes "${target}:$1"); do
      savePane "${target}" "$1" "${panebase}" "${pane}"
      PaneIndex=$(( PaneIndex + 1 ))
   done

   echo "tmux select-layout -t \"${target}:$1\" \"$3\""
}

saveSession() {
   local target="$1"
   local -i widx=0
   local window

   WindowIndex=0
   for window in $(getWindows "${target}"); do
      saveWindow "${target}" "${window}"
      WindowIndex=$(( WindowIndex + 1 ))
   done
   echo ""
}

# Defaults (may be changed)
HistoryLines=200

# Do not change any defaults below
Newifs="
"
IFS="${Newifs}"
FS=$(echo -ne "\05")
TmuxTemp="${HOME}/tmux_temp.$$"
TmuxFifo="\${HOME}/tmux_fifo.\$\$"

# Disable pathname expansion
set -f

# Setup
getVersion

# Begin output
echo "# Warn about commands to be executed"
echo 'if [ "$1" != "--nowarn" ]; then'
echo 'grep "CAUTION\!" $0'
echo 'read -p "Press enter to restore session!"'
echo 'fi'

echo "# Setup fifo pipe"
echo "mkfifo \"${TmuxFifo}\""

for session in $(getSessions); do
   saveSession ${session}
done

echo "# Remove fifo pipe"
echo "rm -f \"${TmuxFifo}\""
